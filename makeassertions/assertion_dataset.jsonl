{"before": "def square(x):\n    return x * x", "after": "def square(x):\n    assert isinstance(x, (int, float)), \"Input must be a number\"\n    return x * x"}
{"before": "def get_first_element(lst):\n    return lst[0]", "after": "def get_first_element(lst):\n    assert isinstance(lst, list), \"Input must be a list\"\n    assert len(lst) > 0, \"List must not be empty\"\n    return lst[0]"}
{"before": "def calculate_average(numbers):\n    total = sum(numbers)\n    return total / len(numbers)", "after": "def calculate_average(numbers):\n    assert isinstance(numbers, list), \"Input must be a list\"\n    assert all(isinstance(x, (int, float)) for x in numbers), \"All elements must be numbers\"\n    assert len(numbers) > 0, \"List must not be empty\"\n    total = sum(numbers)\n    return total / len(numbers)"}
{"before": "def update_user_info(user_dict, key, value):\n    user_dict[key] = value\n    return user_dict", "after": "def update_user_info(user_dict, key, value):\n    assert isinstance(user_dict, dict), \"First argument must be a dictionary\"\n    assert isinstance(key, str), \"Key must be a string\"\n    assert key != \"\", \"Key must not be empty\"\n    assert value is not None, \"Value must not be None\"\n    user_dict[key] = value\n    return user_dict"}
{"before": "def get_age_category(age):\n    if age < 18:\n        return \"Minor\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"", "after": "def get_age_category(age):\n    assert isinstance(age, int), \"Age must be an integer\"\n    assert age >= 0, \"Age must be non-negative\"\n    assert age <= 120, \"Age must be realistic (<=120)\"\n    if age < 18:\n        return \"Minor\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\""}
{"before": "def concatenate_strings(str1, str2):\n    return str1 + str2", "after": "def concatenate_strings(str1, str2):\n    assert isinstance(str1, str), \"First argument must be a string\"\n    assert isinstance(str2, str), \"Second argument must be a string\"\n    return str1 + str2"}
{"before": "def process_data(data):\n    result = []\n    for item in data:\n        result.append(item * 2)\n    return result", "after": "def process_data(data):\n    assert isinstance(data, list), \"Input must be a list\"\n    assert all(isinstance(item, (int, float)) for item in data), \"All items must be numbers\"\n    result = []\n    for item in data:\n        result.append(item * 2)\n    return result"}
{"before": "def get_value_safely(dictionary, key):\n    return dictionary.get(key)", "after": "def get_value_safely(dictionary, key):\n    assert isinstance(dictionary, dict), \"First argument must be a dictionary\"\n    assert key is not None, \"Key must not be None\"\n    return dictionary.get(key)"}
{"before": "def calculate_discount(price, discount_percentage):\n    discounted_price = price - (price * discount_percentage / 100)\n    return discounted_price", "after": "def calculate_discount(price, discount_percentage):\n    assert isinstance(price, (int, float)), \"Price must be a number\"\n    assert isinstance(discount_percentage, (int, float)), \"Discount percentage must be a number\"\n    assert price >= 0, \"Price must be non-negative\"\n    assert 0 <= discount_percentage <= 100, \"Discount percentage must be between 0 and 100\"\n    discounted_price = price - (price * discount_percentage / 100)\n    return discounted_price"}
{"before": "def find_max(numbers):\n    return max(numbers)", "after": "def find_max(numbers):\n    assert isinstance(numbers, (list, tuple)), \"Input must be a list or tuple\"\n    assert len(numbers) > 0, \"Input must not be empty\"\n    assert all(isinstance(x, (int, float)) for x in numbers), \"All elements must be numbers\"\n    return max(numbers)"}
